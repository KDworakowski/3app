version: "3.2"

# list of containers to be run
services:
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      # Sample data comes from:
      # https://github.com/mistertandon/node-express-hbs/blob/master/movies_collection.json
      - ./mongo:/docker-entrypoint-initdb.d
  # rabbit_mq container uses the default rabbitmq image
  # exposes the ports
  # uses the specified volume
  rabbit_mq:

    # we use management image to get the
    # plugin for web dashboard
    image: rabbitmq:3.8-rc-management
    container_name: rabbit_mq
    ports:
        - '5672:5672'
        - '15672:15672'
    volumes:
      - rabbit_mqdata:/usr/share/rabbitmq/data

  # produces container builds the producer image
  # and produces message to the queue
  producer:
    build: producer
    depends_on:
        - rabbit_mq
    environment:
        AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
    volumes:
      - ./producer:/usr/src/app/producer

  # consumer container builds the consumer image
  # and consumes messages from the queue
  # we spawn 2 consumer containers to run parallely
  # on the same queue
  consumer1:
    build: consumer
    depends_on:
        - rabbit_mq
    environment:
        AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
    volumes:
      - ./consumer:/usr/src/app/consumer
  consumer2:
    build: consumer
    depends_on:
        - rabbit_mq
    environment:
        AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
    volumes:
      - ./consumer:/usr/src/app/consumer
  # consumer2:
  #   build: consumer
  #   depends_on:
  #       - rabbit_mq
  #       - mongo
  #   environment:
  #       AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
  #   volumes:
  #     - ./consumer:/usr/src/app/consumer
volumes:
    rabbit_mqdata:
      driver: local
